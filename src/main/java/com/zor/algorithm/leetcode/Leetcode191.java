package com.zor.algorithm.leetcode;

/**
 * 191. 位1的个数
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 * <p>
 * <p>
 * <p>
 * 提示：
 * <p>
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 * <p>
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 示例 3：
 * <p>
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 输入必须是长度为 32 的 二进制串 。
 * <p>
 * <p>
 * 进阶：
 * <p>
 * 如果多次调用这个函数，你将如何优化你的算法？
 *
 * @author zqq
 * @date 2021/3/22
 */
public class Leetcode191 {
    public static void main(String[] args) {
        // 0b开头表示2进制
        int n = 0b000000000000000000000000001011;
        System.out.println("hammingWeight(n) = " + hammingWeight(n));

    }

    // you need to treat n as an unsigned value
    public static int hammingWeight(int n) {
        int ret = 0;
        for (int i = 0; i < 32; i++) {
            // 让 n 与 2^i 进行与运算，当且仅当 nn 的第 ii 位为 11 时，运算结果不为 00
            if ((n & (1 << i)) != 0) {
                ret++;
            }
        }
        return ret;
    }

    public static int solution1(int n) {
        // 在实际代码中，我们不断让当前的 n 与 n - 1 做与运算，
        // 直到 n 变为 0 即可。因为每次运算会使得n的最低位的1被翻转，因此运算次数就等于n的二进制位中1的个数。
        // 与leetcode338做法类似
        int ret = 0;
        // 不用 n > 0 是因为可能是负数
        while (n != 0) {
            n &= n - 1;
            ret++;
        }
        return ret;
    }
}
