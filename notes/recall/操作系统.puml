@startmindmap
'https://plantuml.com/mindmap-diagram

* 操作系统
** Linux五种IO模型
*** 阻塞IO模型
*** 非阻塞IO模型
*** IO复用模型
*** 信号驱动IO模型
*** 异步IO模型

** IO多路复用
*** select
****:*调用select会阻塞，直到有描述符就绪（可读、可写、异常）或超时
*函数返回后，可以通过遍历fdset，来找到就绪描述符
*最多可监听1024个文件描述符;
*** poll
*** epoll
**** 水平触发
***** 只要fd处于可读/可写状态，epoll就会持续通知进程
***** 未处理完数据时会重复触发，编程更简单（不易遗漏事件）

**** 边缘触发
***** 仅在fd状态发生变化时（如从不可读变为可读）通知一次。
***** 必须非阻塞读取+循环读尽数据，减少重复通知，性能更高

** Node.js的IO模型
*** **混合策略**：底层并非单一策略，根据IO类型和操作系统动态选择
*** 网络IO：IO多路复用，libuv库封装操作系统的事件驱动机制
****:*Linux：epoll（高效事件通知）
* FreeBSD/macos：kqueue
* Windows：使用IOCP（I/O完成端口）;

*** 磁盘IO: 线程池模拟异步（ThreadPool+BIO）
****:Linux/Unix因为AIO支持不完善，采用线程池模拟异步
* libuv管理的线程池（默认4线程）执行阻塞式磁盘操作（如readFile）
* 操作完成后通过时间循环通知线程

Windows直接使用IOCP实现真正的异步磁盘IO;

*** Node.js单线程本质
**** JS执行是单线程，时间循环在主线程运行
**** 底层IO操作依赖多线程/IO多路复用



@endmindmap
